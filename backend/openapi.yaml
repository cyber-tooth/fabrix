openapi: 3.0.0
info:
  title: FilFabs API
  description: 'You can find APIs about authentification, users, categories and material'
  version: 1.0.0
tags:
  - name: authentification
    description: bearer authentification
  - name: users
    description: Informationen about users
  - name: Categories
    description: information about categories
  - name: materials
    description: information about materials
  - name: images
    description: upload images for a material
servers:
  - url: 'http://localhost:4000'
    description: Local development server
paths:
  /api/v1/auth/login:
    post:
      tags:
        - authentification
      summary: >-
        Authenticate user credentials and return a JWT token and a cookie with a
        refresh token
      description: Users must be verified before authenticating.
      operationId: authenticate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: jason@example.com
                password:
                  type: string
                  example: pass123
              required:
                - email
                - password
      responses:
        '200':
          description: 'User details, a JWT access token and a refresh token cookie'
          headers:
            Set-Cookie:
              description: '`refreshToken`'
              schema:
                type: string
                example: >-
                  refreshToken=51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550;
                  Path=/; Expires=Tue, 16 Jun 2020 09:14:17 GMT; HttpOnly
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: 5eb12e197e06a76ccdefc121
                  title:
                    type: string
                    example: Mr
                  firstName:
                    type: string
                    example: Jason
                  lastName:
                    type: string
                    example: Watmore
                  email:
                    type: string
                    example: jason@example.com
                  role:
                    type: string
                    example: Admin
                  created:
                    type: string
                    example: '2020-05-05T09:12:57.848Z'
                  isVerified:
                    type: boolean
                    example: true
                  jwtToken:
                    type: string
                    example: >-
                      eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWIxMmUxOTdlMDZhNzZjY2RlZmMxMjEiLCJpZCI6IjVlYjEyZTE5N2UwNmE3NmNjZGVmYzEyMSIsImlhdCI6MTU4ODc1ODE1N30.xR9H0STbFOpSkuGA9jHNZOJ6eS7umHHqKRhI807YT1Y
        '400':
          description: The email or password is incorrect
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email or password is incorrect
  /api/v1/auth/refresh-token:
    post:
      tags:
        - authentification
      summary: Use a refresh token to generate a new JWT token and a new refresh token
      description: The refresh token is sent and returned via cookies.
      operationId: refreshToken
      parameters:
        - in: cookie
          name: refreshToken
          description: The `refreshToken` cookie
          schema:
            type: string
            example: >-
              51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550
      responses:
        '200':
          description: 'User details, a JWT access token and a new refresh token cookie'
          headers:
            Set-Cookie:
              description: '`refreshToken`'
              schema:
                type: string
                example: >-
                  refreshToken=51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550;
                  Path=/; Expires=Tue, 16 Jun 2020 09:14:17 GMT; HttpOnly
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: 5eb12e197e06a76ccdefc121
                  title:
                    type: string
                    example: Mr
                  firstName:
                    type: string
                    example: Jason
                  lastName:
                    type: string
                    example: Watmore
                  email:
                    type: string
                    example: jason@example.com
                  role:
                    type: string
                    example: Admin
                  created:
                    type: string
                    example: '2020-05-05T09:12:57.848Z'
                  isVerified:
                    type: boolean
                    example: true
                  jwtToken:
                    type: string
                    example: >-
                      eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWIxMmUxOTdlMDZhNzZjY2RlZmMxMjEiLCJpZCI6IjVlYjEyZTE5N2UwNmE3NmNjZGVmYzEyMSIsImlhdCI6MTU4ODc1ODE1N30.xR9H0STbFOpSkuGA9jHNZOJ6eS7umHHqKRhI807YT1Y
        '400':
          description: 'The refresh token is invalid, revoked or expired'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid token
  /api/v1/auth/revoke-token:
    post:
      tags:
        - authentification
      summary: Revoke a refresh token
      description: >-
        Admin users can revoke the tokens of any user, regular users can only
        revoke their own tokens.
      operationId: revokeToken
      security:
        - bearerAuth: []
      parameters:
        - in: cookie
          name: refreshToken
          description: >-
            The refresh token can be sent in a cookie or the post body, if both
            are sent the token in the body is used.
          schema:
            type: string
            example: >-
              51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: >-
                    51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550
      responses:
        '200':
          description: The refresh token was successfully revoked
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token revoked
        '400':
          description: The refresh token is invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid token
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /api/v1/auth/register:
    post:
      tags:
        - authentification
      summary: Register a new user user and send a verification email
      description: >-
        The first user registered in the system is assigned the `Admin` role,
        other authentication are assigned the `User` role.
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Mr
                firstName:
                  type: string
                  example: Jason
                lastName:
                  type: string
                  example: Watmore
                email:
                  type: string
                  example: jason@example.com
                password:
                  type: string
                  example: pass123
                confirmPassword:
                  type: string
                  example: pass123
                acceptTerms:
                  type: boolean
              required:
                - title
                - firstName
                - lastName
                - email
                - password
                - confirmPassword
                - acceptTerms
      responses:
        '200':
          description: >-
            The registration request was successful and a verification email has
            been sent to the specified email address
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: >-
                      Registration successful, please check your email for
                      verification instructions
  /api/v1/auth/verify-email:
    post:
      tags:
        - authentification
      summary: >-
        Verify a new user with a verification token received by email after
        registration
      operationId: verifyEmail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: >-
                    3c7f8d9c4cb348ff95a0b74a1452aa24fc9611bb76768bb9eafeeb826ddae2935f1880bc7713318f
              required:
                - token
      responses:
        '200':
          description: Verification was successful so you can now login to the user
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Verification successful, you can now login'
        '400':
          description: Verification failed due to an invalid token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Verification failed
  /api/v1/auth/forgot-password:
    post:
      tags:
        - authentification
      summary: Submit email address to reset the password on an user
      operationId: forgotPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: jason@example.com
              required:
                - email
      responses:
        '200':
          description: >-
            The request was received and an email has been sent to the specified
            address with password reset instructions (if the email address is
            associated with an user)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Please check your email for password reset instructions
  /api/v1/auth/validate-reset-token:
    post:
      tags:
        - authentification
      summary: >-
        Validate the reset password token received by email after submitting to
        the /authentication/forgot-password route
      operationId: validateResetToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: >-
                    3c7f8d9c4cb348ff95a0b74a1452aa24fc9611bb76768bb9eafeeb826ddae2935f1880bc7713318f
              required:
                - token
      responses:
        '200':
          description: Token is valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token is valid
        '400':
          description: Token is invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid token
  /api/v1/auth/reset-password:
    post:
      tags:
        - authentification
      summary: Reset the password for an user
      operationId: resetPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: >-
                    3c7f8d9c4cb348ff95a0b74a1452aa24fc9611bb76768bb9eafeeb826ddae2935f1880bc7713318f
                password:
                  type: string
                  example: newPass123
                confirmPassword:
                  type: string
                  example: newPass123
              required:
                - token
                - password
                - confirmPassword
      responses:
        '200':
          description: >-
            Password reset was successful so you can now login to the user with
            the new password
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Password reset successful, you can now login'
        '400':
          description: Password reset failed due to an invalid token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid token
  /api/v1/users:
    get:
      tags:
        - users
      summary: Get a list of all authentication
      description: Restricted to admin users.
      operationId: getAllAccounts
      security:
        - bearerAuth: []
      responses:
        '200':
          description: An array of all authentication
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: 5eb12e197e06a76ccdefc121
                    title:
                      type: string
                      example: Mr
                    firstName:
                      type: string
                      example: Jason
                    lastName:
                      type: string
                      example: Watmore
                    email:
                      type: string
                      example: jason@example.com
                    role:
                      type: string
                      example: Admin
                    created:
                      type: string
                      example: '2020-05-05T09:12:57.848Z'
                    updated:
                      type: string
                      example: '2020-05-08T03:11:21.553Z'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - users
      summary: Create a new user
      description: Restricted to admin users.
      operationId: createAccount
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Mr
                firstName:
                  type: string
                  example: Jason
                lastName:
                  type: string
                  example: Watmore
                email:
                  type: string
                  example: jason@example.com
                password:
                  type: string
                  example: pass123
                confirmPassword:
                  type: string
                  example: pass123
                role:
                  type: string
                  enum:
                    - Admin
                    - User
                    - superAdmin
              required:
                - title
                - firstName
                - lastName
                - email
                - password
                - confirmPassword
                - role
      responses:
        '200':
          description: >-
            User created successfully, verification is not required for
            authentication created with this endpoint. The details of the new
            user are returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: 5eb12e197e06a76ccdefc121
                  title:
                    type: string
                    example: Mr
                  firstName:
                    type: string
                    example: Jason
                  lastName:
                    type: string
                    example: Watmore
                  email:
                    type: string
                    example: jason@example.com
                  role:
                    type: string
                    example: Admin
                  created:
                    type: string
                    example: '2020-05-05T09:12:57.848Z'
        '400':
          description: Email is already registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email 'jason@example.com' is already registered
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  '/api/v1/users/{id}':
    parameters:
      - in: path
        name: id
        description: User id
        required: true
        example: 5eb12e197e06a76ccdefc121
        schema:
          type: string
    get:
      tags:
        - users
      summary: Get a single user by id
      description: >-
        Admin users can access any user, regular users are restricted to their
        own user.
      operationId: getAccountById
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Details of the specified user
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: 5eb12e197e06a76ccdefc121
                  title:
                    type: string
                    example: Mr
                  firstName:
                    type: string
                    example: Jason
                  lastName:
                    type: string
                    example: Watmore
                  email:
                    type: string
                    example: jason@example.com
                  role:
                    type: string
                    example: Admin
                  created:
                    type: string
                    example: '2020-05-05T09:12:57.848Z'
                  updated:
                    type: string
                    example: '2020-05-08T03:11:21.553Z'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      tags:
        - users
      summary: Update an user
      description: >-
        Admin users can update any user including role, regular users are
        restricted to their own user and cannot update role.
      operationId: updateAccount
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Mr
                firstName:
                  type: string
                  example: Jason
                lastName:
                  type: string
                  example: Watmore
                email:
                  type: string
                  example: jason@example.com
                password:
                  type: string
                  example: pass123
                confirmPassword:
                  type: string
                  example: pass123
                role:
                  type: string
                  enum:
                    - Admin
                    - User
      responses:
        '200':
          description: >-
            User updated successfully. The details of the updated user are
            returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: 5eb12e197e06a76ccdefc121
                  title:
                    type: string
                    example: Mr
                  firstName:
                    type: string
                    example: Jason
                  lastName:
                    type: string
                    example: Watmore
                  email:
                    type: string
                    example: jason@example.com
                  role:
                    type: string
                    example: Admin
                  created:
                    type: string
                    example: '2020-05-05T09:12:57.848Z'
                  updated:
                    type: string
                    example: '2020-05-08T03:11:21.553Z'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      tags:
        - users
      summary: Delete an user
      description: >-
        Admin users can delete any user, regular users are restricted to their
        own user.
      operationId: deleteAccount
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/v1/categories/main:
    get:
      tags:
        - Categories
      summary: Get a list of the three main categories
      operationId: getMainCategories
      responses:
        '200':
          description: An array of main categories
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    CategoryName:
                      type: string
                    hasDegree:
                      type: boolean
                    degreeType:
                      type: string
                    children:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: integer
                          CategoryName:
                            type: string
                          hasDegree:
                            type: boolean
                          degreeType:
                            type: string
                          children:
                            type: object
                example:
                  - id: 1
                    CategoryName: Main Categories
                    hasDegree: false
                    degreeType: null
                    children: []
                  - id: 60
                    CategoryName: Sub-categories
                    hasDegree: false
                    degreeType: null
                    children: []
                  - id: 93
                    CategoryName: additional infos
                    hasDegree: false
                    degreeType: null
                    children: []
  /api/v1/categories/main_and_sub:
    get:
      tags:
        - Categories
      summary: Get main and sub categories
      operationId: getMainAndSubCategories
      responses:
        '200':
          description: An array with main and sub categories
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    CategoryName:
                      type: string
                    hasDegree:
                      type: boolean
                    degreeType:
                      type: string
                    children:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: integer
                          CategoryName:
                            type: string
                          hasDegree:
                            type: boolean
                          degreeType:
                            type: string
                          children:
                            type: object
                example:
                  - id: 1
                    CategoryName: Main Categories
                    hasDegree: false
                    degreeType: null
                    children: []
                  - id: 60
                    CategoryName: Sub-categories
                    hasDegree: false
                    degreeType: null
                    children: []
  '/api/v1/categories/{id}':
    parameters:
      - in: path
        name: id
        description: category id
        required: true
        example: 3
        schema:
          type: integer
    get:
      tags:
        - Categories
      summary: Get childs from a category
      description: Shows the categories that have the id as parent_key
      operationId: getChildCategories
      responses:
        '200':
          description: Details of the child cateogries
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    CategoryName:
                      type: string
                    hasDegree:
                      type: boolean
                    degreeType:
                      type: string
                    children:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: integer
                          CategoryName:
                            type: string
                          hasDegree:
                            type: boolean
                          degreeType:
                            type: string
                          children:
                            type: object
                example:
                  - id: 4
                    CategoryName: Alpaca
                    hasDegree: true
                    degreeType: float
                    children: []
                  - id: 5
                    CategoryName: Casein
                    hasDegree: true
                    degreeType: float
                    children: []
  /api/v1/material/:
    get:
      tags:
        - materials
      summary: Get a list of all materials
      operationId: getAll
      responses:
        '200':
          description: An array of all materials
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    name:
                      type: string
                      example: Hahnentritt
                    created_by:
                      type: string
                      example: Laura
                    categories:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 20
                          degree:
                            type: string
                            example: 96
                          parent_id:
                            type: integer
                            example: 3
                    images:
                      type: array
                      items:
                        type: object
                        properties:
                          url:
                            type: string
                            example: /public/img/Hahnentritt.jpeg
                          name:
                            type: string
                            example: Hahnentritt.jpeg
    post:
      tags:
        - materials
      summary: Create a new material
      operationId: create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  created_by:
                    type: string
                    example: Laura
                  name:
                    type: string
                    example: Hahnentritt
                  consistsOf:
                    type: array
                    items:
                      type: object
                      properties:
                        category_id:
                          type: integer
                          example: 22
                        degree:
                          type: string
                          example: 4
                  images:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          example: Hahnentritt.jpeg
                        url:
                          type: string
                          example: /public/img/Hahnentritt.jpeg
              required:
                - created_by
                - name
                - consistsOf
                - images
      responses:
        '200':
          description: >-
            Material created successfully. The details of the new material are
            returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 22
                    created_by:
                      type: string
                      example: Laura
                    name:
                      type: string
                      example: Hahnentritt
                    categories:
                      type: array
                      items:
                        type: object
                        properties:
                          category_id:
                            type: integer
                            example: 22
                          degree:
                            type: string
                            example: 4
                          parent_id:
                            type: number
                            example: 21
                    images:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                            example: Hahnentritt.jpeg
                          url:
                            type: string
                            example: /public/img/Hahnentritt.jpeg
        '400':
          description: Error
  '/api/v1/material/{id}':
    parameters:
      - in: path
        name: id
        description: material id
        required: true
        example: 1
        schema:
          type: integer
    get:
      tags:
        - materials
      summary: Get material with specific id
      description: Shows material
      operationId: getById
      responses:
        '200':
          description: Details of the material
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    name:
                      type: string
                      example: Hahnentritt
                    created_by:
                      type: string
                      example: Laura
                    categories:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 20
                          degree:
                            type: string
                            example: 96
                          parent_id:
                            type: integer
                            example: 3
                    images:
                      type: array
                      items:
                        type: object
                        properties:
                          url:
                            type: string
                            example: /public/img/Hahnentritt.jpeg
                          name:
                            type: string
                            example: Hahnentritt.jpeg
        '400':
          description: Material is not found
    put:
      tags:
        - materials
      summary: Update a material
      description: Everyone can update a material.
      operationId: update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  created_by:
                    type: string
                    example: Laura
                  name:
                    type: string
                    example: T-Shirt
                  consistsOf:
                    type: array
                    items:
                      type: object
                      properties:
                        category_id:
                          type: integer
                          example: 22
                        degree:
                          type: string
                          example: 70
                  images:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          example: T-Shirt.jpeg
                        url:
                          type: string
                          example: /public/img/T-Shirt.jpeg
      responses:
        '200':
          description: Material updated successfully with a new ID.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 24
                    created_by:
                      type: string
                      example: Laura
                    name:
                      type: string
                      example: T-Shirt
                    categories:
                      type: array
                      items:
                        type: object
                        properties:
                          category_id:
                            type: integer
                            example: 22
                          degree:
                            type: string
                            example: 70
                          parent_id:
                            type: number
                            example: 21
                    images:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                            example: T-Shirt.jpeg
                          url:
                            type: string
                            example: /public/img/T-Shirt.jpeg
        '400':
          description: Error
    delete:
      tags:
        - materials
      summary: Delete material
      description: Everyone can delete material.
      operationId: delete
      responses:
        '200':
          description: Material deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Material deleted successfully
        '400':
          description: Material is not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Material is not found
  /api/v1/images/:
    post:
      tags:
        - images
      summary: Upload images for material 
      operationId: uploadImages
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                key:
                  example: file
                value:
                  type: object
      responses:
        '200':
          description: Images uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Images uploaded: '
        '400':
          description: Error
